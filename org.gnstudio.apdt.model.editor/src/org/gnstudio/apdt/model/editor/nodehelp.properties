###############################################################################
# Copyright (c) 2010, 2012 GNstudio s.r.l. and others.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the GNU Lesser General Public License v3.0
# which accompanies this distribution, and is available at
# http://www.gnu.org/licenses/gpl-3.0.html
#
# Contributors:
#   GNstudio s.r.l. - initial API and implementation
###############################################################################
editor.help.program = A program is the root node you can use in the model to identify a very large model,\
 the name doesn't impact in anyway the generated source code or the pseudocode
editor.help.pakage = The package name is the common way most programming languages use to enhance code sharing and avoid name conflicts, the name is used to generate the source code folders tree
editor.help.class = The class node is used to define the class name, its access and the final and \
 or dynamic nature; the class annotation is relevant only for java source code generation; the class name is mandatory in order to export correctly the source code
editor.help.interface = The interface node is used to define the name of the interface itself and its access; nested in the node there is a description node useful to add further information to the node; the interface name is mandatory in order to export correctly the source code
editor.help.extends = The extends node is used to specify the datatype(s) extended by a Class or by an Interface; the datatype(s) can be selected between project classes and interfaces or between the datatypes supported by most of the popular programming platforms
editor.help.method = The method node is used to fully define a method through the name and the note that is the comment that will be added in the generated source code; the type select is the one to be used to define the type of method (i.e. standard or accessor), the return type field is needed to specify the datatype returned by the method; the datatype(s) can be selected between project classes and interfaces or between the datatypes supported by most of the popular programming platforms
editor.help.resource = The resource node is not relevant for the generated outputs, it can be used in order to link the model to any external file (i.e. another diagram, source code, etc.)
editor.help.implements = The implements node can be used only into the class node and is used to specify the interfaces implemented by the class itself; the interface(s) can be selected between project interfaces or between the interfaces defined by most of the popular programming platforms
editor.help.description = The description node useful to add further information to the node, it doesn't impact the generated outputs
editor.help.arguments = The arguments node is used to add to the generated outputs methods or function arguments; an argument is defined through the name and the datatype, the datatype(s) can be selected between project classes and interfaces or between the datatypes supported by most of the popular programming platforms
editor.help.throws = The throws node is specifically intended for programming languages that support this kind of syntax; the datatype(s) can be selected between project classes and interfaces or between the datatypes supported by most of the popular programming platforms
editor.help.discussion = The discussion node doesn't affect any kind of output, it is intended in order to exchange opinions on the model with pairs
editor.help.variable = The variable node is used to define the name, type and value of a variable; the note is the content used in order to comments in the source code
editor.help.comment = The comment node is intended to be used in order to add some comments to the model, its content will be exported only in the source code output
editor.help.iteration = The iteration node is intended to be the one to specify which kind of iteration to use: for, while, do while and for each; by default when added a description node is added as leaf of the tree
editor.help.if = The if node can be used to express a conditional statement; the content of the note is exported in any output as the clause of the statement
editor.help.elseif = The else if node can be used to articulate a conditional statement; the content of the note is exported in any output as the clause of the statement
editor.help.else = The else node is used to provide an alternative in a conditional statement, the content of the note is exported in any output as the clause of the statement
editor.help.switch = The switch node is intended to be the one to use to define a switch condition, by default when added a description and a case node are added as leafs of the tree; the content of the note is exported in any output as the clause of the statement
editor.help.case = The case node can be used only as a child of a switch node; the content of the note is exported in any output as the clause of the statement
editor.help.default =  The default node can be used only as a child of a switch node; the content of the note is exported in any output as the clause of the statement
editor.help.group = The group node doesn't impact at all any kind of export, it's intended to be used in order to group together portions of the model so that the readability is significantly improved
editor.help.try = The try node is intended to be used to express the try construct pretty diffused among the most popular programming languages; the content of the note is not exported in any output editor.help.catch = The catch node is intended to be part of a try node; the content of the note is exported in any output as part of the catch statement
editor.help.finally =  The finally node is intended to be part of a try node; the content of the note is not exported in any output 
editor.help.methodcall = The call node is intended to be used to specify a method or a function to be called and the arguments to use; the output in the source code is exactly as a method call
editor.help.recursion = The recursion node describe a recursive call; the output consist in a call to the method or function the node is nested  
editor.help.print = The print node is intended to be used when something has to be printed out to the user when executing a program; the content of the description is rendered as a comment in any source code output
editor.help.show = The show node is intended to be used when a UI element or a message has to be shown to the user; the content of the description is rendered as a comment in any source code output
editor.help.prompt = The prompt node is intended to be used when he user will get a prompt message; the content of the description is rendered as a comment in any source code output 
editor.help.write = The write node is intended to be used when the software writes of a file, or more generally some data, to a destination; the content of the description is rendered as a comment in any source code output 
editor.help.recover = The recover node is intended to be used when take place an operation that store a value  recovered from the program \
 routine itself in a variable; the content of the description is rendered as a comment in any source code output 
editor.help.read = The read node is intended to be used when the algorithm starts reading a local or remote file or more generally of some data from a source; the content of the description is rendered as a comment in any source code output 
editor.help.set = The set node is intended to be used when a value has to be assigned to a variable or class member; the content of the description is rendered as a comment in any source code output
editor.help.calculateset = The calculate and set node is intended to be used the algorithm executes some calculations and optionally store the result in a variable; the content of the description is rendered as a comment in any source code output
editor.help.methodreturn = The method return node is intended to be used in order to specify if a method execution has to be interrupted with a return keyword
editor.help.classmember = The class member node is used to fully define a member through the name and the note that is the comment that will be added in the generated source code; the access select is the one responsible for the member visibility (public, private, etc.); the return type field is needed to specify the datatype returned by the method; the datatype(s) can be selected between project classes and interfaces or between the datatypes supported by most of the popular programming platforms 




